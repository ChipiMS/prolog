
save(FileName) :-
    tell(FileName),
    listing,
    told.

:- dynamic enfe/2.

enfe("anemia", ["fiebre", "tos"]).
enfe("tosferina", ["fiebre", "tos"]).
enfe("enfisema", ["fiebre", "tos", "hiperinflacion"]).
enfe("bronquitis", ["moco_bronquial", "fiebre"]).
enfe("disnea", ["tos", "hiperinflacion"]).
enfe("asma", ["moco_bronquial", "tos"]).
enfe("gripe", ["tos", "moco"]).
enfe("anemia", ["fiebre", "tos"]).
enfe("tosferina", ["fiebre", "tos"]).
enfe("enfisema", ["fiebre", "tos", "hiperinflacion"]).
enfe("bronquitis", ["moco_bronquial", "fiebre"]).
enfe("disnea", ["tos", "hiperinflacion"]).
enfe("asma", ["moco_bronquial", "tos"]).
enfe("gripe", ["tos", "moco"]).
enfe("anemia", ["fiebre", "tos"]).
enfe("tosferina", ["fiebre", "tos"]).
enfe("enfisema", ["fiebre", "tos", "hiperinflacion"]).
enfe("bronquitis", ["moco_bronquial", "fiebre"]).
enfe("disnea", ["tos", "hiperinflacion"]).
enfe("asma", ["moco_bronquial", "tos"]).
enfe("gripe", ["tos", "moco"]).

:- multifile url_path/2.


:- dynamic pce_post_expansion_hook/2.
:- multifile pce_post_expansion_hook/2.


:- multifile prolog_clause_name/2.

prolog_clause_name(Ref, Name) :-
    pce_portray:
    (   clause(Head, _, Ref),
        user:prolog_predicate_name(Head, Name)
    ).

:- dynamic prolog_exception_hook/4.
:- multifile prolog_exception_hook/4.

prolog_exception_hook(error(E, context(Ctx0, Msg)), error(E, context(prolog_stack(Stack), Msg)), Fr, GuardSpec) :-
    prolog_stack:
    (   current_prolog_flag(backtrace, true),
        \+ is_stack(Ctx0, _Frames),
        (   atom(GuardSpec)
        ->  debug(backtrace,
                  'Got uncaught (guard = ~q) exception ~p (Ctx0=~p)',
                  [GuardSpec, E, Ctx0]),
            stack_guard(GuardSpec),
            Guard=GuardSpec
        ;   prolog_frame_attribute(GuardSpec,
                                   predicate_indicator,
                                   Guard),
            debug(backtrace,
                  'Got exception ~p (Ctx0=~p, Catcher=~p)',
                  [E, Ctx0, Guard]),
            stack_guard(Guard)
        ),
        (   current_prolog_flag(backtrace_depth, Depth)
        ->  Depth>0
        ;   Depth=20
        ),
        get_prolog_backtrace(Depth,
                             Stack0,
                             [frame(Fr), guard(Guard)]),
        debug(backtrace, 'Stack = ~p', [Stack0]),
        clean_stack(Stack0, Stack1),
        join_stacks(Ctx0, Stack1, Stack)
    ).

:- dynamic pce_pre_expansion_hook/2.
:- multifile pce_pre_expansion_hook/2.

pce_pre_expansion_hook(In, Out) :-
    emacs_extend:emacs_expansion(In, Out).

:- multifile prolog_predicate_name/2.

prolog_predicate_name(pce_principal:send_implementation(Id0, _, _), Id) :-
    pce_portray:
    (   method_from_id(Id0, SG),
        atom_from_method(SG, Id)
    ).
prolog_predicate_name(pce_principal:get_implementation(Id0, _, _, _), Id) :-
    pce_portray:
    (   method_from_id(Id0, SG),
        atom_from_method(SG, Id)
    ).

archivo :-
    asserta(enfe("gripe", ["tos", "moco"])),
    asserta(enfe("asma", ["moco_bronquial", "tos"])),
    asserta(enfe("disnea", ["tos", "hiperinflacion"])),
    asserta(enfe("bronquitis", ["moco_bronquial", "fiebre"])),
    asserta(enfe("enfisema", ["fiebre", "tos", "hiperinflacion"])),
    asserta(enfe("tosferina", ["fiebre", "tos"])),
    asserta(enfe("anemia", ["fiebre", "tos"])),
    save(enfdbs).

:- thread_local thread_message_hook/3.
:- dynamic thread_message_hook/3.
:- volatile thread_message_hook/3.

